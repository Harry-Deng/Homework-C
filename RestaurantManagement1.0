#include<stdio.h>
#include<string.h>
#include <windows.h>//sleep函数所需的头文件，使用sleep函数的目的：1.模拟系统加载时间 2.延长提示语显示时间，保证信息展示充分。
#include<stdlib.h>

#define N 128//一桌可点的最大菜品数目。
#define D 15//菜单上菜的数目。
#define H 10//餐厅内桌子的数量。
#define MaxCapacity 10//餐厅内最大的桌子可容纳的人数。


//|*****************************************结构体声名区*********************************************|

//订单结构体
typedef struct Order{
	int Table_ID;//餐桌序号
	int Dish_ID[N];//餐桌点的菜品序号
    struct Order *next;//链接指针
}ORDER;

//餐桌结构体
typedef struct Table{
	int Table_ID;//餐桌序号
	int  Capacity;//餐桌最多能容纳的人数
	int Table_State;//1表示有客，0表示空闲
}TABLE;

//菜品结构体
typedef struct Dish{
	int Dish_ID;//菜品编号
	char Dish_Name[15];//菜品名称
	float Dish_Price;//菜品单价
}DISH;

//|****************************************函数原型/全局变量声名区********************************************|
//功能性函数原型：
int search(void);
int Pass_Word(void);
void Table_Init(void);
void Dish_Menu(void);//用于打印当日菜单。
void Display(int);
void Save_Inform(ORDER *,int);
void saveInList(float);
void ModifyPW();
void List_Management(void);
void Observe(void);
void ListMenu(void);
void Main_Menu(void);
void Menu_select(void);
void Get_Rank(void);
void load_dish(void);
void load_password(void);
void Observe_password(void);

//装饰性函数原型：
void self_introduction();//水印
void start_loading_function();//启动加载可视化函数
void end_loading_function();//关闭加载可视化函数
void place_order_loading_function();//下单加载可视化函数
void paying_loading_function();//支付加载可视化函数
void password_modify_loading_function();//修改密码可视化函数

ORDER *CreateOne(int);
ORDER *Dish_Order(ORDER *,ORDER *, int);
ORDER *Payment(ORDER *);

TABLE tb[H];//声明为桌子结构体数组。
DISH  dish[N];//声明菜单结构体数组。

int PASSWORD;//声明默认通行证。默认通行证保存在“通行证.txt”文件中。

//|*******************************************主函数*************************************************|

int main()
{
    self_introduction();
    start_loading_function();
    Table_Init();
    Menu_select();
    return 0;
}

//|*****************************************功能性子函数区*******************************************|

void Main_Menu()
{
    printf("                           *餐厅服务系统*\n\n");
    Sleep(150);
    printf("\t\t|-------------主菜单-------------|\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按1   <自助点餐>         |\n");
    printf("\t\t|       按2   <客户结账>         |\n");
    printf("\t\t|       按3   <账目管理>         |\n");
    printf("\t\t|       按4   <餐馆统计>         |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按0    退出系统          |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|--------------------------------|\n");
    Sleep(150);
    printf("\n\t\t[系统提示]：请选择您所需的功能: ");
}

void Dish_Menu(void){
    int i;
    load_dish();
	Sleep(100);
    printf("\n\t\t[系统提示]：以下是本店今日的菜单：\n\n");
	printf("\t\t\t    |--------------------------------------|\n");
	printf("\t\t\t    |菜品序号\t菜名\t\t菜品价格/份|\n");
	for(i=0;i<D;i++)
        {
            printf("\t\t\t    |%d\t\t%s\t\t%.f |\n",dish[i].Dish_ID,dish[i].Dish_Name,dish[i].Dish_Price);
        }
    printf("\t\t\t    |--------------------------------------|\n\n");

}


void Menu_select(void){
	ORDER* head;//声明链表头。
	int choose;
	int result;
	head = NULL;
	do
    {
        system("cls");
        Main_Menu();
        fflush(stdin);//可有可无。
        scanf("%d",&choose);
        switch(choose)
            {
                case 1:
                    result = search();//检索是否有合适的空桌子。-1表示无满足需求的桌子，1表示仅一名客人且有空闲桌子，其余数字均为合适的桌子序号，区分出1是为了更好的打出提示语。
                    if(result == 1)
                        {
                            system("cls");
                            printf("\t\t[系统提示]：欢迎选购本店菜品!\n\t\t[系统提示]：您可以到%d号餐桌就餐。\n", result);
                            Sleep(150);
                        }
                    else if(result != -1)
                        {
                            system("cls");
                            printf("\t\t[系统提示]：欢迎选购本店菜品!\n\t\t[系统提示]：您和您的朋友可以到%d号餐桌就餐。\n",result);
                            Sleep(150);
                        }
                    else
                        {
                            break;
                        }
                    Dish_Menu();
                    head = Dish_Order(head, CreateOne(result), result);
                    system("cls");
                            break;

                case 2:
                    head = Payment(head);
                    break;

                case 3:
                    load_password();
                    List_Management();
                    system("cls");
                    break;

                case 4:
                    Get_Rank();
                    fflush(stdin);
                    getchar();
                    system("cls");
                    break;

                case 0:
                    break;

                default:
                    system("cls");
                    printf("\t\t[系统提示]：选择失败！请输入正确的序号。");
                    Sleep(1000);
                    break;
            }
	}while(choose);
	system("cls");
    end_loading_function();
    printf("\t\t[系统提示]：感谢您使用本系统，按“任意键”结束。\n\n");
    self_introduction();
}

void load_dish(void)
{
    FILE *fp1;
	int i;

    if((fp1=fopen("菜品仓库.txt", "r")) == NULL)//此处可以将文件地址更改为参数，通过scanf录入文件地址来更加灵活的选择菜单文件。
        {
            printf("\n\t\t[系统提示]：菜品仓库打开失败！");
            Sleep(150);
            system("cls");
            printf("\n\t\t[系统提示]：因出现崩溃性错误，系统即将关闭！\n");
            Sleep(150);
            end_loading_function();
            printf("\t\t[系统提示]：感谢您使用本系统，按“任意键”结束。\n\n");
            exit(EXIT_FAILURE);
            system("close");
        }
	for(i=0; i<D; i++)
        {
            fscanf(fp1, "%d %s %f", &dish[i].Dish_ID, dish[i].Dish_Name, &dish[i].Dish_Price);
        }
	fclose(fp1);
}

void load_password(void)
{
    FILE *fp4;
	int i=0;

    if((fp4=fopen("通行证.txt", "r")) == NULL)
        {
            printf("\n\t\t[系统提示]：“通行证.txt”打开失败！");
            Sleep(150);
            system("cls");
            printf("\n\t\t[系统提示]：因出现崩溃性错误，系统即将关闭！\n");
            Sleep(150);
            end_loading_function();
            printf("\t\t[系统提示]：感谢您使用本系统，按“任意键”结束。\n\n");
            exit(EXIT_FAILURE);
        }
    fscanf(fp4,"%d", &PASSWORD);
	fclose(fp4);

}

void Table_Init()//用于提前安排好桌子的序号和容量，该函数亦可通过文件管理，类似调用菜品似的调用文件来更加灵活的更改信息。
{
	tb[0].Capacity=1;tb[0].Table_ID=1;
	tb[1].Capacity=2;tb[1].Table_ID=2;
	tb[2].Capacity=3;tb[2].Table_ID=3;
	tb[3].Capacity=4;tb[3].Table_ID=4;
	tb[4].Capacity=5;tb[4].Table_ID=5;
	tb[5].Capacity=6;tb[5].Table_ID=6;
	tb[6].Capacity=7;tb[6].Table_ID=7;
	tb[7].Capacity=8;tb[7].Table_ID=8;
	tb[8].Capacity=9;tb[8].Table_ID=9;
	tb[9].Capacity=10;tb[9].Table_ID=10;
}


int search(void){
	int Cust_Num;
	int i;
	system("cls");
	printf("\n                           *自助选菜系统*\n\n");
    Sleep(150);
    printf("\t\t|--------------------------------|\n");
    printf("\t\t|             公告栏             |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|        本店新推出特色菜        |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|           *三秦套餐*           |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|            欢迎尝鲜            |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|--------------------------------|\n");
    Sleep(150);
	printf("\n\t\t[系统提示]：请输入来客数量:");
	scanf("%d", &Cust_Num);
	if(MaxCapacity < Cust_Num)
        {
            printf("\n\t\t[系统提示]：十分抱歉！本店没有容纳%d人的餐桌，无法满足您和您朋友的需要。\n", Cust_Num);
            printf("\n\t\t[系统提示]：按“任意键”键返回主菜单。");
            fflush(stdin);
            getchar();
            return -1;
        }
	while(Cust_Num <= MaxCapacity)//检索是否恰好有对应人数的桌位。
        {
            for(i=0; i<H; i++)
                {
                    if(tb[i].Table_State == 0)
                        {
                            if(tb[i].Capacity == Cust_Num)
                                {
                                    return (tb[i].Table_ID);
                                }
                        }
                }
            break;
        }
    while(Cust_Num <= MaxCapacity)//在上一个循环检测完毕发现无恰好合适的桌子后，检索是否有位置数大于人数的空余桌子。
        {
            for(i=0; i<H; i++)
                {
                    if(tb[i].Table_State == 0)
                        {
                            if(tb[i].Capacity > Cust_Num)
                                {
                                    return (tb[i].Table_ID);
                                }
                        }
                }
            printf("\n\t\t[系统提示]：目前餐厅内无空桌，您可以在休息区稍等一会儿。\n\n");
            break;
        }
	fflush(stdin);
    printf("\t\t[系统提示]：按“任意键”键返回主菜单。");
    getchar();
    system("cls");
	return -1;
}

ORDER* CreateOne(int result)//创造新的链表节点以储存信息。
{
    ORDER *p;//声明指针域。
	int i, ID;
	p = (struct Order*)malloc(sizeof(struct Order));//向系统缓冲区申请储存空间。
	for(i=0; i<D; i++)//初始化信息域。
        {
            p -> Dish_ID[i] = 0;
        }
	if(result != -1)//若有空桌子。
        {
            p -> Table_ID = result;//将桌号赋值。
            for(i=0; i<N; i++)
                {
                    printf("\t\t[系统提示]：请输入您选择的菜品的序号。（按“0”结束选餐）：");
                    scanf("%d", &ID);
                    if(ID > 0 && ID <= D)
                        {
                            printf("\t\t[系统提示]：订单已保存。\n\n");
                        }
                    if(ID < 0 || ID > D)//剔除错误的输入。
                    	{
                            printf("\t\t[系统警告]\a：输入错误，请输入正确的菜品序号：\n\n");
                        }
                    if(ID == 0)//检测是否点菜完毕。
                        {
                            break;
                        }
                    else
                        {
                            p -> Dish_ID[i] = ID;//填充节点数据域，储存所点菜品信息。
                        }

                }
            tb[result-1].Table_State = 1;//将订单对应的桌子状态调整为有客。
        }
	p -> next = NULL;//将指针域指向空。
	return p;//返回节点的地址。
}

ORDER* Dish_Order(ORDER *head, ORDER *p, int table_num)//应用链表来储存订单信息，*p是由CreateOne函数生成的新订单链表节点的地址，*head是整个订单链表的链表头。
{
    int i=0;
	ORDER *p1 = NULL;
	p1 = head;
	if(head != NULL)
        {
            if(p != NULL)
                {
                    while(p1 -> next != NULL)//遍历到链表尾。
                        {
                            p1 = p1 -> next;
                        }
                    p1 -> next = p;//应用尾插法链接链表节点。
                    system("cls");
                    place_order_loading_function();
                    printf("\t\t[系统提示]：下单成功！\n");
                    printf("\t\t[系统提示]：您所点的菜品如下:\n");
                    puts("");
                    printf("\t\t\t    |--------------------------------------|\n");
                    printf("\t\t\t    |菜品序号\t菜名\t\t菜品价格/份|\n");
                    printf("\t\t\t    |--------------------------------------|\n");
                    while(p->Dish_ID[i]!=0)
                        {
                            Display(p->Dish_ID[i]);
                            i++;
                            printf("\t\t\t    |--------------------------------------|\n");
                        }
                    printf("\n\t\t[系统提示]：请到%d号桌就坐，侍者将会将菜品送至%d号桌。\n", table_num, table_num);
                    fflush(stdin);
                    printf("\t\t[系统提示]：按“任意键”键返回主菜单。");
                    getchar();
                }
            else
                {
                    printf("\t\t[系统提示]：下单失败！请联系管理员。\n");//防止因新节点指针变成野指针导致程序出错的保险。
                    exit(EXIT_FAILURE);
                }

        }
	else//若链表头为空，意味着之前没有订单。
        {
            if(p != NULL)//若新的订单有信息。
                {
                    head = p;//将新订单节点的地址直接放在链表头处，完成链接。
                    system("cls");
                    place_order_loading_function();
                    printf("\t\t[系统提示]：下单成功！\n");
                    printf("\t\t[系统提示]：您所点的菜品如下:\n");
                    puts("");
                    printf("\t\t\t    |--------------------------------------|\n");
                    printf("\t\t\t    |菜品序号\t菜名\t\t菜品价格/份|\n");
                    printf("\t\t\t    |--------------------------------------|\n");
                    while(p->Dish_ID[i]!=0)
                        {
                            Display(p->Dish_ID[i]);
                            i++;
                            printf("\t\t\t    |--------------------------------------|\n");
                        }
                    printf("\n\t\t[系统提示]：请到%d号桌就坐，侍者将会将菜品送至%d号桌。\n", table_num, table_num);
                    fflush(stdin);
                    printf("\n\t\t[系统提示]：按“任意键”键返回主菜单。");
                    getchar();
                }

        }
	return head;//返回完成链接的链表头指变（链表首地址）。
}

void Display(int ID)//展示dish结构体数组中与订单契合的内容，即展示所点菜品的信息。
{
	int i=0;
	for(i=0; i<D; i++)//遍历dish结构体数组。
        {
            if(dish[i].Dish_ID == ID)//当order结构体中的ID与dish结构体中的ID对应上时进入。
                {
                    printf("\t\t\t    |%d\t\t%s\t\t%.f |\n",dish[i].Dish_ID,dish[i].Dish_Name,dish[i].Dish_Price);
                    break;
                }
        }
}

void Save_Inform(ORDER *p,int m)
{
	FILE *fp;
	time_t timer;
	int i=0;
	timer=time(NULL);
	if((fp=fopen("历史记录.txt","a"))==NULL)
        {
            printf("操作失败\n");
            exit(1);
        }
	fprintf(fp,"%d\n",m);
	while(p->Dish_ID[i]>0)
        {
            fprintf(fp,"%d\t%s\t%f\n", dish[p->Dish_ID[i]-1].Dish_ID, dish[p->Dish_ID[i]-1].Dish_Name, dish[p->Dish_ID[i]-1].Dish_Price);
            i++;
        }
	fprintf(fp,"%s",ctime(&timer));
	Sleep(300);
	printf("\t\t[系统提示]：消费记录已保存至终端。\n");
	fclose(fp);
    printf("\n\t\t[系统提示]：按“任意键”键返回主菜单。");
    getchar();
}

void Observe()
{
	FILE *fp;
	float pay;
	char str[25];
	int i=0;
	int j=0;
	if((fp=fopen("账本.txt","r"))==NULL)
        {
            printf("\t\t[系统提示]：“账本.txt”打开失败，请联系管理员。\n");
            exit(1);
        }
    system("cls");
	printf("\t\t[系统提示]：消费记录如下：\n\n");
	printf("\t\t\t    |--------------------------------------|\n");
	printf("\t\t\t    |消费金额\t消费时间                   |\n");
    printf("\t\t\t    |--------------------------------------|\n");
	while(!feof(fp))
        {
            i=0;
            j=0;
            fscanf(fp,"%f\t",&pay);
            while(i<=5&&j<25)
                {
                    fscanf(fp,"%c",&str[j]);
                    j++;
                    if(str[j]==' ')
                        {
                            i++;
                        }
                }
            fscanf(fp,"\n");
            i=0;
            j=0;
            printf("\t\t\t     %.1f元\t",pay);
            while(i<=5&&j<25)
                {
                    printf("%c",str[j]);
                    j++;
                    if(str[j]==' ')
                        {
                            i++;
                        }
                }
        }
    printf("\t\t\t    |--------------------------------------|\n");
    fclose(fp);
    fflush(stdin);
    printf("\n\t\t[系统提示]：按“任意键”键返回上级菜单。");
    getchar();
    system("cls");
    printf("                           *账目管理系统*\n\n");
    Sleep(150);
    printf("\t\t|--------------------------------|\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按1   <修改通行证>       |\n");
    printf("\t\t|       按2   <查看账目>         |\n");
    printf("\t\t|       按3   <查看通行证>       |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按0   <退出系统>         |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|--------------------------------|\n");
    Sleep(150);
}

ORDER *Payment(ORDER *head)
{
	int i=0;
	int count=0;
	int pay_choose=0;
	int joke=100;
	float pay=0.0;
	float Pay, casher=0;;
	int ID;
	ORDER *p, *p1;
	p=head;
	p1=NULL;
	printf("\t\t[系统提示]：请输入您的餐桌号：");
	fflush(stdin);
	scanf("%d",&ID);
	while(p!=NULL)
        {
            if(p->Table_ID==ID)
                {
                    system("cls");
                    printf("\t\t[系统提示]：您的账单如下:\n");
                    puts("");
                    printf("\t\t\t    |--------------------------------------|\n");
                    printf("\t\t\t    |菜品序号\t菜名\t\t菜品价格/份|\n");
                    printf("\t\t\t    |--------------------------------------|\n");
                    while(p->Dish_ID[i]!=0)
                        {
                            Display(p->Dish_ID[i]);
                            pay+=dish[p->Dish_ID[i]-1].Dish_Price;
                            i++;
                            count++;
                            printf("\t\t\t    |--------------------------------------|\n");
                        }
                puts("");
                printf("\t\t[系统提示]：您一共点了%d道菜品。\n",count);
                printf("\t\t[系统提示]：您本次的消费金额共%.1f元。\n",pay);
                fflush(stdin);
                printf("\n\t\t[系统提示]：按“任意键”键继续。");
                getchar();
                system("cls");
                Sleep(150);
                while(joke>3 || joke<0)
                    {
                        system("cls");
                        printf("                           *订单支付系统*\n\n");
                        printf("\t\t|--------------------------------|\n");
                        printf("\t\t|                                |\n");
                        printf("\t\t|         按1  <支付宝>          |\n");
                        printf("\t\t|         按2  <微信支付>        |\n");
                        printf("\t\t|         按3  <银行卡>          |\n");
                        printf("\t\t|         按0  <现金支付>        |\n");
                        printf("\t\t|                                |\n");
                        printf("\t\t|--------------------------------|\n\n");
                        Sleep(150);
                        printf("\t\t[系统提示]：请选择支付方式:");
                        scanf("%d", &joke);
                        if(joke>3 || joke<0)
                            {
                                printf("\t\t[系统提示]：选择失败！请重新进行选择。\n");
                                Sleep(750);
                            }
                    }
                printf("\t\t[系统提示]：待支付：%.1f元。",pay);
                printf("\n\t\t[系统提示]：请支付：");
                scanf("%f", &Pay);
                while(Pay < pay)
                    {
                        printf("\t\t[系统提示]：识别到您录入了%.1f元，您仍需支付%.1f元。\n", Pay, pay - Pay);
                        printf("\t\t[系统提示]：请继续支付:");
                        scanf("%f", &casher);
                        Pay = Pay + casher;
                        casher = 0;
                    }
                if(Pay > pay)
                    {   system("cls");
                        paying_loading_function();
                        printf("\t\t[系统提示]：支付成功！找您%.1f元。\n", Pay-pay);
                    }
                else
                    {
                        system("cls");
                        paying_loading_function();
                        printf("\t\t[系统提示]：支付成功！\n",Pay-pay);
                    }
                printf("\t\t[系统提示]：谢谢惠顾,欢迎下次光临！\n");
                if(count>0)
                    {
                        saveInList(pay);
                        Save_Inform(p,count);
                    }
                tb[p->Table_ID-1].Table_State=0;
                break;
            }
        else
            {
                p1=p;
                p=p->next;
            }
        }
    if(p==NULL)
        {
            printf("\n\t\t[系统提示]：此餐桌未点菜!\n");
            printf("\n\t\t[系统提示]：按“任意键”键返回主菜单。");
        }
    else if(p==head)
        {
            free(p);
            p=NULL;
        }
    else
        {
            p1->next=p->next;
            free(p);
            p=NULL;
        }
    getch();
	system("cls");
	return head;
}

int Pass_Word()
{
	int password = 0, enter_choice = 0;
	do{
		printf("\t\t[系统提示]：请输入通行证：");
		scanf("%d", &password);
		if(PASSWORD == password)
            {
                return 1;
            }
		else
            {
                printf("\t\t[系统警告]：\a通行证输入错误！请输入正确的通行证！\n");
                printf("\t\t[系统提示]：是否重新输入？（若是请输入“1”，若否请输入“0”）：");
                scanf("%d", &enter_choice);
            }
      }while(enter_choice == 1);
    return 0;
}

void ListMenu(){
	int choice;
	printf("                           *账目管理系统*\n\n");
    Sleep(150);
    printf("\t\t|--------------------------------|\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按1   <修改通行证>       |\n");
    printf("\t\t|       按2   <查看账目>         |\n");
    printf("\t\t|       按3   <查看通行证>       |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|       按0   <退出系统>         |\n");
    printf("\t\t|                                |\n");
    printf("\t\t|--------------------------------|\n");
    Sleep(150);
	do{
		printf("\n\t\t[系统提示]：请选择您所需的功能: ");
		scanf("%d",&choice);
		switch(choice)
            {
                case 1:
                    ModifyPW();
                    ListMenu();
                    break;
                case 2:
                    Observe();
                    break;
                case 3:
                    system("cls");
                    Observe_password();
                    break;
                case 0:
                    Menu_select();
                    exit(0);
                default:
                    printf("\t\t[系统提示]：选择失败，请输入正确的序号。\n");
                    break;
            }
    }while(1);
}

void List_Management(){
	FILE *fp;
	if((fp=fopen("账本.txt","r"))==NULL)
        {
            printf("\t\t[系统提示]：账本打开失败，请联系管理员。\n");
            exit(1);
        }
	if(Pass_Word())
        {
            system("cls");
            ListMenu();
        }
}

void ModifyPW()//修改密码
{
    FILE *fp5;
    int i=0;
    int password1, password2, mod_suc = 1;
    do{
        printf("\t\t[系统提示]：请输入新的通行证：");
        scanf("%d", &password1);
        printf("\t\t[系统提示]：请重复输入新的通行证：");
        scanf("%d", &password2);
        if(password1 == password2)
            {
                PASSWORD = password1;
                if((fp5=fopen("通行证.txt", "w")) == NULL)
                    {
                        printf("\n\t\t[系统提示]：“通行证.txt”打开失败！请联系管理员。");
                        Sleep(150);
                        system("cls");
                        printf("\n\t\t[系统提示]：因出现崩溃性错误，系统即将关闭！\n");
                        Sleep(150);
                        end_loading_function();
                        printf("\t\t[系统提示]：感谢您使用本系统，按“任意键”结束。\n\n");
                        exit(EXIT_FAILURE);
                    }
                fprintf(fp5,"%d", PASSWORD);
                fclose(fp5);
                system("cls");
                password_modify_loading_function();
                system("cls");
                printf("\t\t[系统提示]：通行证修改成功！\n");
                Sleep(900);
                system("cls");
                mod_suc = 0;
            }
        else
            {
                printf("\n\t\t[系统警告]：\a两次输入的通行证不一致！请重新输入。\n");
                mod_suc = 1;
            }
       }while(mod_suc);
}

void saveInList(float pay)
{
	FILE*fp;
	time_t timer;
	timer=time(NULL);
	if((fp=fopen("账本.txt","a"))==NULL)
        {
            printf("\t\t[系统提示]：“账本.txt”打开失败，请联系管理员。\n");
            exit(1);
        }
	fprintf(fp,"%f\t%s\n", pay, ctime(&timer));
	printf("\t\t[系统提示]：账户信息已更新。\n");
	fclose(fp);
}

void Get_Rank(void)
{
	FILE *fp;
	int n, i, m=0, j;
	int count[D] = {0}, t=0;
	char s[16] = "", a[10];
	if((fp = fopen("历史记录.txt","r"))==NULL)
        {
            printf("\t\t[系统提示]：“历史记录.txt”打开失败，请联系管理员。\n");
            exit(1);
        }
	while(!feof(fp))
        {
            fscanf(fp, "%d\n", &n);
            i=0;
            while(i != n)
                {
                    fscanf(fp, "%d%*s%*s", &m, s, s);
                    for(j=0; j<10; j++)
                        {
                            if(m == dish[j].Dish_ID)
                                {
                                    count[j]++;
                                    break;
                                }
                        }
                    i++;
                    if(i == n)
                        {
                            fscanf(fp,"%*s%*s%*s%*s%*s\n",s,s,s,s,s);
                        }
                }
        }
	system("cls");
	printf("\n\t\t[系统提示]：<今日菜品热度榜>\n\n");
	printf("\t\t\t    |-----------------------------------|");
    for(i=0; i<D; i++)
        {
            printf("\n\t\t\t    |第%d号菜品：",i+1);
            for(j=0;j<count[i];j++)
                {
                    printf("*");
                    Sleep(50);
                }
        }
	for(i=0; i<D-1; i++)
        {
            for(j=0; j<(D-1)-i; j++)
                {
                    if(count[j]<count[j+1])
                        {
                            t=count[j];
                            strcpy(a,dish[j].Dish_Name);
                            count[j]=count[j+1];
                            strcpy(dish[j].Dish_Name,dish[j+1].Dish_Name);
                            count[j+1]=t;
                            strcpy(dish[j+1].Dish_Name,a);
                        }
                }
        }
    printf("\n\t\t\t    |-----------------------------------|\n");
    printf("\n\t\t\t                     1/2                  \n");
    printf("\n\t\t[系统提示]：按“任意键”进入下一页。");
    fflush(stdin);
    getchar();
    system("cls");

	printf("\n\t\t[系统提示]：<人气榜>\n\n");
	printf("\t\t\t    |-----------------------------------|\n");
	printf("\t\t\t    |");
	for(i=0;i<4;i++)
        {
            printf("%s|",dish[i].Dish_Name);
        }
    printf("\n\t\t\t    |-----------------------------------|\n\n");
    printf("\t\t\t                     2/2                  \n\n");
    Sleep(300);
    printf("\t\t[系统提示]：按“任意键”键返回主菜单。");
}

//|*****************************************装饰性子函数区*******************************************|

void self_introduction()
{
    int i;
    printf("\t\t");
    for(i=0; i<=9; i++)
    {
        printf("*-");
        Sleep(50);
    }
    printf("|");Sleep(50);
    printf("P");Sleep(50);
    printf("o");Sleep(50);
    printf("w");Sleep(50);
    printf("e");Sleep(50);
    printf("r");Sleep(50);
    printf("e");Sleep(50);
    printf("d");Sleep(50);
    printf(" ");Sleep(50);
    printf("b");Sleep(50);
    printf("y");Sleep(50);
    printf(" ");Sleep(50);
    printf("D");Sleep(50);
    printf("e");Sleep(50);
    printf("n");Sleep(50);
    printf("g");Sleep(50);
    printf("_");Sleep(50);
    printf("Y");Sleep(50);
    printf("i");Sleep(50);
    printf("M");Sleep(50);
    printf("o");Sleep(50);
    printf("|");Sleep(50);
    for(i=0; i<=9; i++)
        {
            printf("-*");
            Sleep(50);
        }
    Sleep(500);
    system("cls");
}

void Observe_password()
{
    printf("\n\t\t[系统提示]：<通行证>\n\n");
	printf("\t\t\t    |-----------------------------------|\n");
	printf("\t\t\t    |              %d               |\n", PASSWORD);
    printf("\t\t\t    |-----------------------------------|\n");
    printf("\n\t\t[系统提示]：按“任意键”回到上级菜单。");
    fflush(stdin);
    getchar();
    system("cls");
    ListMenu();
}

void start_loading_function()
{
    int i, j;
    for(j=0; j<=2; j++)
        {
            printf("\t\t[系统提示]：欢迎使用<餐厅服务系统>!\n");
            printf("\t\t[系统提示]：系统启动中");
            for(i=0; i<=2; i++)
                {
                    putchar('.');
                    Sleep(150);
                    putchar('.');
                    Sleep(150);
                }
            system("cls");
        }
    Sleep(300);
}

void end_loading_function()
{
    int i, j;
    for(j=0; j<=2; j++)
        {
            printf("\t\t[系统提示]：系统关闭中");
            for(i=0; i<=2; i++)
                {
                    putchar('.');
                    Sleep(150);
                    putchar('.');
                    Sleep(150);
                }
            system("cls");
        }
    Sleep(200);
}

void place_order_loading_function()
{
    int i, j;
    for(j=0; j<=2; j++)
        {
            printf("\t\t[系统提示]：正在下单，请稍等!\n");
            printf("\t\t[系统提示]：下单中");
            for(i=0; i<=2; i++)
                {
                    putchar('.');
                    Sleep(150);
                    putchar('.');
                    Sleep(150);
                }
            system("cls");
        }
    Sleep(300);
}

void paying_loading_function()
{
    int i, j;
    for(j=0; j<=2; j++)
        {
            printf("\t\t[系统提示]：正在支付，请稍等!\n");
            printf("\t\t[系统提示]：支付中");
            for(i=0; i<=2; i++)
                {
                    putchar('.');
                    Sleep(150);
                    putchar('.');
                    Sleep(150);
                }
            system("cls");
        }
    Sleep(300);
}

void password_modify_loading_function()
{
    int i, j;
    for(j=0; j<=2; j++)
        {
            printf("\t\t[系统提示]：正在修改通行证，请稍等!\n");
            printf("\t\t[系统提示]：保存中");
            for(i=0; i<=2; i++)
                {
                    putchar('.');
                    Sleep(150);
                    putchar('.');
                    Sleep(150);
                }
            system("cls");
        }
    Sleep(300);
}

//|*****************************************废弃函数区*******************************************|

/*void saveInList(float pay)//将账单保存在账本文件中。
{
	FILE* fp;
	time_t tnow;
    tnow = time(0);
    struct tm *sttm;
    sttm = localtime(&tnow);
	if((fp = fopen("账本.txt","a")) == NULL)
        {
            printf("\t\t[系统提示]：“账本.txt”打开失败，请联系管理员。\n");
            exit(1);
        }
    fprintf(fp, "%.1f元  %u年%u月%u日%u时%u分%u秒\n", pay, (sttm->tm_year)+1900, (sttm->tm_mon)+1, sttm->tm_mday, sttm->tm_hour, sttm->tm_min, sttm->tm_sec);//有问题系统时间
	printf("\t\t[系统提示]：账户信息已更新。\n");
	fclose(fp);
}*/

/*void Save_Inform(ORDER *p ,int m)//将点餐记录保存在文件中。
{
	FILE *fp;
	int i = 0;
	time_t tnow;
    tnow = time(0);
    struct tm *sttm;
    sttm = localtime(&tnow);
	if((fp=fopen("顾客消费记录.txt","a"))==NULL)
        {
            printf("\t\t[系统提示]：操作失败\n");
            exit(1);
        }
	fprintf(fp, "\n\n本次消费共点了%d道菜:\n", m);
	while(p->Dish_ID[i]>0)
        {
            fprintf(fp,"第%d道菜：\t%s\t价格：%.1f元\n",dish[p->Dish_ID[i]-1].Dish_ID, dish[p->Dish_ID[i]-1].Dish_Name, dish[p->Dish_ID[i]-1].Dish_Price);
            i++;
        }
    fprintf(fp, "消费时间：%u年%u月%u日%u时%u分%u秒", (sttm->tm_year)+1900, (sttm->tm_mon)+1, sttm->tm_mday, sttm->tm_hour, sttm->tm_min, sttm->tm_sec);
	printf("\t\t[系统提示]：消费记录已保存至终端。\n");
	fclose(fp);
}*/
